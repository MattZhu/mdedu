package com.mdedu.domainobject;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table QUESTION_ATTEMPT.
*/
public class QuestionAttemptDao extends AbstractDao<QuestionAttempt, Long> {

    public static final String TABLENAME = "QUESTION_ATTEMPT";

    /**
     * Properties of entity QuestionAttempt.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CharpaterId = new Property(1, Long.class, "charpaterId", false, "CHARPATER_ID");
        public final static Property SubmitDate = new Property(2, java.util.Date.class, "submitDate", false, "SUBMIT_DATE");
        public final static Property TimeUsed = new Property(3, Integer.class, "timeUsed", false, "TIME_USED");
        public final static Property CorrectCount = new Property(4, Integer.class, "correctCount", false, "CORRECT_COUNT");
    };

    private DaoSession daoSession;

    private Query<QuestionAttempt> charpater_QuestionAttemptsQuery;

    public QuestionAttemptDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionAttemptDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'QUESTION_ATTEMPT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CHARPATER_ID' INTEGER," + // 1: charpaterId
                "'SUBMIT_DATE' INTEGER," + // 2: submitDate
                "'TIME_USED' INTEGER," + // 3: timeUsed
                "'CORRECT_COUNT' INTEGER);"); // 4: correctCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QUESTION_ATTEMPT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, QuestionAttempt entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long charpaterId = entity.getCharpaterId();
        if (charpaterId != null) {
            stmt.bindLong(2, charpaterId);
        }
 
        java.util.Date submitDate = entity.getSubmitDate();
        if (submitDate != null) {
            stmt.bindLong(3, submitDate.getTime());
        }
 
        Integer timeUsed = entity.getTimeUsed();
        if (timeUsed != null) {
            stmt.bindLong(4, timeUsed);
        }
 
        Integer correctCount = entity.getCorrectCount();
        if (correctCount != null) {
            stmt.bindLong(5, correctCount);
        }
    }

    @Override
    protected void attachEntity(QuestionAttempt entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public QuestionAttempt readEntity(Cursor cursor, int offset) {
        QuestionAttempt entity = new QuestionAttempt( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // charpaterId
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // submitDate
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // timeUsed
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // correctCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, QuestionAttempt entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCharpaterId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSubmitDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setTimeUsed(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCorrectCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(QuestionAttempt entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(QuestionAttempt entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "questionAttempts" to-many relationship of Charpater. */
    public List<QuestionAttempt> _queryCharpater_QuestionAttempts(Long charpaterId) {
        synchronized (this) {
            if (charpater_QuestionAttemptsQuery == null) {
                QueryBuilder<QuestionAttempt> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CharpaterId.eq(null));
                charpater_QuestionAttemptsQuery = queryBuilder.build();
            }
        }
        Query<QuestionAttempt> query = charpater_QuestionAttemptsQuery.forCurrentThread();
        query.setParameter(0, charpaterId);
        return query.list();
    }

}
