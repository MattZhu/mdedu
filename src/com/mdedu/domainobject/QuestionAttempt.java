package com.mdedu.domainobject;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table QUESTION_ATTEMPT.
 */
public class QuestionAttempt {

    private Long id;
    private Long charpaterId;
    private java.util.Date submitDate;
    private Integer timeUsed;
    private Integer correctCount;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient QuestionAttemptDao myDao;

    private List<QuesitonAnswer> answers;

    public QuestionAttempt() {
    }

    public QuestionAttempt(Long id) {
        this.id = id;
    }

    public QuestionAttempt(Long id, Long charpaterId, java.util.Date submitDate, Integer timeUsed, Integer correctCount) {
        this.id = id;
        this.charpaterId = charpaterId;
        this.submitDate = submitDate;
        this.timeUsed = timeUsed;
        this.correctCount = correctCount;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuestionAttemptDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getCharpaterId() {
        return charpaterId;
    }

    public void setCharpaterId(Long charpaterId) {
        this.charpaterId = charpaterId;
    }

    public java.util.Date getSubmitDate() {
        return submitDate;
    }

    public void setSubmitDate(java.util.Date submitDate) {
        this.submitDate = submitDate;
    }

    public Integer getTimeUsed() {
        return timeUsed;
    }

    public void setTimeUsed(Integer timeUsed) {
        this.timeUsed = timeUsed;
    }

    public Integer getCorrectCount() {
        return correctCount;
    }

    public void setCorrectCount(Integer correctCount) {
        this.correctCount = correctCount;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<QuesitonAnswer> getAnswers() {
        if (answers == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuesitonAnswerDao targetDao = daoSession.getQuesitonAnswerDao();
            List<QuesitonAnswer> answersNew = targetDao._queryQuestionAttempt_Answers(id);
            synchronized (this) {
                if(answers == null) {
                    answers = answersNew;
                }
            }
        }
        return answers;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAnswers() {
        answers = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
