package com.mdedu.domainobject;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table QUESTION.
 */
public class Question {

    private Long id;
    private Long charpaterId;
    private String title;
    private String type;
    private String options;
    private String correctAnswer;
    private String imagePath;
    private String explaination;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient QuestionDao myDao;

    private Charpater charpater;
    private Long charpater__resolvedKey;


    public Question() {
    }

    public Question(Long id) {
        this.id = id;
    }

    public Question(Long id, Long charpaterId, String title, String type, String options, String correctAnswer, String imagePath, String explaination) {
        this.id = id;
        this.charpaterId = charpaterId;
        this.title = title;
        this.type = type;
        this.options = options;
        this.correctAnswer = correctAnswer;
        this.imagePath = imagePath;
        this.explaination = explaination;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuestionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getCharpaterId() {
        return charpaterId;
    }

    public void setCharpaterId(Long charpaterId) {
        this.charpaterId = charpaterId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getOptions() {
        return options;
    }

    public void setOptions(String options) {
        this.options = options;
    }

    public String getCorrectAnswer() {
        return correctAnswer;
    }

    public void setCorrectAnswer(String correctAnswer) {
        this.correctAnswer = correctAnswer;
    }

    public String getImagePath() {
        return imagePath;
    }

    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }

    public String getExplaination() {
        return explaination;
    }

    public void setExplaination(String explaination) {
        this.explaination = explaination;
    }

    /** To-one relationship, resolved on first access. */
    public Charpater getCharpater() {
        Long __key = this.charpaterId;
        if (charpater__resolvedKey == null || !charpater__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CharpaterDao targetDao = daoSession.getCharpaterDao();
            Charpater charpaterNew = targetDao.load(__key);
            synchronized (this) {
                charpater = charpaterNew;
            	charpater__resolvedKey = __key;
            }
        }
        return charpater;
    }

    public void setCharpater(Charpater charpater) {
        synchronized (this) {
            this.charpater = charpater;
            charpaterId = charpater == null ? null : charpater.getId();
            charpater__resolvedKey = charpaterId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
