package com.mdedu.domainobject;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table QUESITON_ANSWER.
*/
public class QuesitonAnswerDao extends AbstractDao<QuesitonAnswer, Long> {

    public static final String TABLENAME = "QUESITON_ANSWER";

    /**
     * Properties of entity QuesitonAnswer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AttemptId = new Property(1, Long.class, "attemptId", false, "ATTEMPT_ID");
        public final static Property QuestionId = new Property(2, Long.class, "questionId", false, "QUESTION_ID");
        public final static Property Answer = new Property(3, String.class, "answer", false, "ANSWER");
        public final static Property Correct = new Property(4, Boolean.class, "correct", false, "CORRECT");
    };

    private Query<QuesitonAnswer> questionAttempt_AnswersQuery;

    public QuesitonAnswerDao(DaoConfig config) {
        super(config);
    }
    
    public QuesitonAnswerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'QUESITON_ANSWER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ATTEMPT_ID' INTEGER," + // 1: attemptId
                "'QUESTION_ID' INTEGER," + // 2: questionId
                "'ANSWER' TEXT," + // 3: answer
                "'CORRECT' INTEGER);"); // 4: correct
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QUESITON_ANSWER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, QuesitonAnswer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long attemptId = entity.getAttemptId();
        if (attemptId != null) {
            stmt.bindLong(2, attemptId);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(3, questionId);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(4, answer);
        }
 
        Boolean correct = entity.getCorrect();
        if (correct != null) {
            stmt.bindLong(5, correct ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public QuesitonAnswer readEntity(Cursor cursor, int offset) {
        QuesitonAnswer entity = new QuesitonAnswer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // attemptId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // questionId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // answer
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // correct
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, QuesitonAnswer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAttemptId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setQuestionId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setAnswer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCorrect(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(QuesitonAnswer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(QuesitonAnswer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "answers" to-many relationship of QuestionAttempt. */
    public List<QuesitonAnswer> _queryQuestionAttempt_Answers(Long attemptId) {
        synchronized (this) {
            if (questionAttempt_AnswersQuery == null) {
                QueryBuilder<QuesitonAnswer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AttemptId.eq(null));
                questionAttempt_AnswersQuery = queryBuilder.build();
            }
        }
        Query<QuesitonAnswer> query = questionAttempt_AnswersQuery.forCurrentThread();
        query.setParameter(0, attemptId);
        return query.list();
    }

}
