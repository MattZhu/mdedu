package com.mdedu.domainobject;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table VIDEO.
 */
public class Video {

    private Long id;
    private Long charpaterId;
    private String link;
    private String name;
    private Long downloadId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient VideoDao myDao;

    private Charpater charpater;
    private Long charpater__resolvedKey;


    public Video() {
    }

    public Video(Long id) {
        this.id = id;
    }

    public Video(Long id, Long charpaterId, String link, String name, Long downloadId) {
        this.id = id;
        this.charpaterId = charpaterId;
        this.link = link;
        this.name = name;
        this.downloadId = downloadId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getVideoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getCharpaterId() {
        return charpaterId;
    }

    public void setCharpaterId(Long charpaterId) {
        this.charpaterId = charpaterId;
    }

    public String getLink() {
        return link;
    }

    public void setLink(String link) {
        this.link = link;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Long getDownloadId() {
        return downloadId;
    }

    public void setDownloadId(Long downloadId) {
        this.downloadId = downloadId;
    }

    /** To-one relationship, resolved on first access. */
    public Charpater getCharpater() {
        Long __key = this.charpaterId;
        if (charpater__resolvedKey == null || !charpater__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CharpaterDao targetDao = daoSession.getCharpaterDao();
            Charpater charpaterNew = targetDao.load(__key);
            synchronized (this) {
                charpater = charpaterNew;
            	charpater__resolvedKey = __key;
            }
        }
        return charpater;
    }

    public void setCharpater(Charpater charpater) {
        synchronized (this) {
            this.charpater = charpater;
            charpaterId = charpater == null ? null : charpater.getId();
            charpater__resolvedKey = charpaterId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
