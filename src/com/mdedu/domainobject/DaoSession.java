package com.mdedu.domainobject;

import java.util.Map;

import android.database.sqlite.SQLiteDatabase;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig courseDaoConfig;
    private final DaoConfig charpaterDaoConfig;
    private final DaoConfig videoDaoConfig;
    private final DaoConfig questionDaoConfig;
    private final DaoConfig questionAttemptDaoConfig;
    private final DaoConfig quesitonAnswerDaoConfig;

    private final CourseDao courseDao;
    private final CharpaterDao charpaterDao;
    private final VideoDao videoDao;
    private final QuestionDao questionDao;
    private final QuestionAttemptDao questionAttemptDao;
    private final QuesitonAnswerDao quesitonAnswerDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        courseDaoConfig = daoConfigMap.get(CourseDao.class).clone();
        courseDaoConfig.initIdentityScope(type);

        charpaterDaoConfig = daoConfigMap.get(CharpaterDao.class).clone();
        charpaterDaoConfig.initIdentityScope(type);

        videoDaoConfig = daoConfigMap.get(VideoDao.class).clone();
        videoDaoConfig.initIdentityScope(type);

        questionDaoConfig = daoConfigMap.get(QuestionDao.class).clone();
        questionDaoConfig.initIdentityScope(type);

        questionAttemptDaoConfig = daoConfigMap.get(QuestionAttemptDao.class).clone();
        questionAttemptDaoConfig.initIdentityScope(type);

        quesitonAnswerDaoConfig = daoConfigMap.get(QuesitonAnswerDao.class).clone();
        quesitonAnswerDaoConfig.initIdentityScope(type);

        courseDao = new CourseDao(courseDaoConfig, this);
        charpaterDao = new CharpaterDao(charpaterDaoConfig, this);
        videoDao = new VideoDao(videoDaoConfig, this);
        questionDao = new QuestionDao(questionDaoConfig, this);
        questionAttemptDao = new QuestionAttemptDao(questionAttemptDaoConfig, this);
        quesitonAnswerDao = new QuesitonAnswerDao(quesitonAnswerDaoConfig, this);

        registerDao(Course.class, courseDao);
        registerDao(Charpater.class, charpaterDao);
        registerDao(Video.class, videoDao);
        registerDao(Question.class, questionDao);
        registerDao(QuestionAttempt.class, questionAttemptDao);
        registerDao(QuesitonAnswer.class, quesitonAnswerDao);
    }
    
    public void clear() {
        courseDaoConfig.getIdentityScope().clear();
        charpaterDaoConfig.getIdentityScope().clear();
        videoDaoConfig.getIdentityScope().clear();
        questionDaoConfig.getIdentityScope().clear();
        questionAttemptDaoConfig.getIdentityScope().clear();
        quesitonAnswerDaoConfig.getIdentityScope().clear();
    }

    public CourseDao getCourseDao() {
        return courseDao;
    }

    public CharpaterDao getCharpaterDao() {
        return charpaterDao;
    }

    public VideoDao getVideoDao() {
        return videoDao;
    }

    public QuestionDao getQuestionDao() {
        return questionDao;
    }

    public QuestionAttemptDao getQuestionAttemptDao() {
        return questionAttemptDao;
    }

    public QuesitonAnswerDao getQuesitonAnswerDao() {
        return quesitonAnswerDao;
    }

}
